const tinycolor = require("tinycolor2");
const fs = require("fs");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const askQuestion = (query) => {
  return new Promise((resolve) => rl.question(query, resolve));
};

const askForInput = async () => {
  let hex = await askQuestion("Enter a HEX color (e.g. #FABADA): ");
  if (!tinycolor(hex).isValid()) {
    console.log(`The HEX color "${hex}" is not valid. Please try again.`);
    rl.close();
    return;
  }

  let includeConcept = (await askQuestion("Do you want to include a concept/purpose? (yes/no): ")).toLowerCase();
  let concept = "color";

  if (includeConcept !== "yes" && includeConcept !== "no") {
    console.log("Invalid response. Please enter 'yes' or 'no'.");
    rl.close();
    return;
  }

  if (includeConcept === "yes") {
    let conceptName = await askQuestion("Enter the name of the concept (e.g. brand, ui, background): ");
    if (!/^[a-zA-Z0-9.-]+$/.test(conceptName)) {
      console.log("The concept name can only contain letters, numbers, hyphens (-), and dots (.).");
      rl.close();
      return;
    }
    concept = conceptName;
  }

  let includeVariant = (await askQuestion("Do you want to include a variant? (yes/no): ")).toLowerCase();
  let variant = null;

  if (includeVariant !== "yes" && includeVariant !== "no") {
    console.log("Invalid response. Please enter 'yes' or 'no'.");
    rl.close();
    return;
  }

  if (includeVariant === "yes") {
    let variantName = await askQuestion("Enter the variant name (e.g. primary, secondary, tertiary): ");
    if (!/^[a-zA-Z0-9.-]+$/.test(variantName)) {
      console.log("The variant name can only contain letters, numbers, hyphens (-), and dots (.).");
      rl.close();
      return;
    }
    variant = variantName;
  }

  return { hex: hex.trim(), concept, variant };
};

const generateStops = (color) => {
  return {
    lightest: color.lighten(40).toHexString(),
    lighter: color.lighten(30).toHexString(),
    light: color.lighten(20).toHexString(),
    dark: color.darken(20).toHexString(),
    darker: color.darken(30).toHexString(),
    darkest: color.darken(40).toHexString()
  };
};

const main = async () => {
  const input = await askForInput();
  if (!input) return;
  
  const { hex, concept, variant } = input;
  const color = tinycolor(hex);
  const rgb = color.toRgbString();
  const stops = generateStops(color);

  const colorData = { HEX: hex, RGB: rgb, stops };
  fs.writeFileSync("formats.json", JSON.stringify(colorData, null, 2));
  console.log("Color data saved as formats.json");

  const tokensData = { color: {} };

  if (variant) {
    tokensData.color[concept] = { [variant]: { value: hex, type: "color" } };
  } else {
    tokensData.color[concept] = { value: hex, type: "color" };
  }

  ["lightest", "lighter", "light", "dark", "darker", "darkest"].forEach((shade) => {
    if (variant) {
      tokensData.color[concept][variant][shade] = { value: stops[shade], type: "color" };
    } else {
      tokensData.color[concept][shade] = { value: stops[shade], type: "color" };
    }
  });

  fs.writeFileSync("tokens.json", JSON.stringify(tokensData, null, 2));
  console.log("Tokens Studio data saved as tokens.json");

  rl.close();
};

main();
